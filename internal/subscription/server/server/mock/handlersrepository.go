// Code generated by MockGen. DO NOT EDIT.
// Source: handlers.go

// Package mock_server is a generated GoMock package.
package mock_server

import (
	context "context"
	reflect "reflect"

	models "github.com/Ostmind/subscriptionservice/internal/subscription/models"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MocksubscriptionManager is a mock of subscriptionManager interface.
type MocksubscriptionManager struct {
	ctrl     *gomock.Controller
	recorder *MocksubscriptionManagerMockRecorder
}

// MocksubscriptionManagerMockRecorder is the mock recorder for MocksubscriptionManager.
type MocksubscriptionManagerMockRecorder struct {
	mock *MocksubscriptionManager
}

// NewMocksubscriptionManager creates a new mock instance.
func NewMocksubscriptionManager(ctrl *gomock.Controller) *MocksubscriptionManager {
	mock := &MocksubscriptionManager{ctrl: ctrl}
	mock.recorder = &MocksubscriptionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocksubscriptionManager) EXPECT() *MocksubscriptionManagerMockRecorder {
	return m.recorder
}

// DeleteSubscription mocks base method.
func (m *MocksubscriptionManager) DeleteSubscription(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscription", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubscription indicates an expected call of DeleteSubscription.
func (mr *MocksubscriptionManagerMockRecorder) DeleteSubscription(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscription", reflect.TypeOf((*MocksubscriptionManager)(nil).DeleteSubscription), ctx, id)
}

// GetSubscriptionListByUserID mocks base method.
func (m *MocksubscriptionManager) GetSubscriptionListByUserID(ctx context.Context, id uuid.UUID) ([]models.SubscriptionListDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionListByUserID", ctx, id)
	ret0, _ := ret[0].([]models.SubscriptionListDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionListByUserID indicates an expected call of GetSubscriptionListByUserID.
func (mr *MocksubscriptionManagerMockRecorder) GetSubscriptionListByUserID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionListByUserID", reflect.TypeOf((*MocksubscriptionManager)(nil).GetSubscriptionListByUserID), ctx, id)
}

// GetTotalPeriodCostByDatesAndServiceName mocks base method.
func (m *MocksubscriptionManager) GetTotalPeriodCostByDatesAndServiceName(ctx context.Context, subList models.SubscriptionListToCostJSON) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalPeriodCostByDatesAndServiceName", ctx, subList)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalPeriodCostByDatesAndServiceName indicates an expected call of GetTotalPeriodCostByDatesAndServiceName.
func (mr *MocksubscriptionManagerMockRecorder) GetTotalPeriodCostByDatesAndServiceName(ctx, subList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalPeriodCostByDatesAndServiceName", reflect.TypeOf((*MocksubscriptionManager)(nil).GetTotalPeriodCostByDatesAndServiceName), ctx, subList)
}

// PostSubscription mocks base method.
func (m *MocksubscriptionManager) PostSubscription(ctx context.Context, sub models.SubscriptionListJSON) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostSubscription", ctx, sub)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostSubscription indicates an expected call of PostSubscription.
func (mr *MocksubscriptionManagerMockRecorder) PostSubscription(ctx, sub interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostSubscription", reflect.TypeOf((*MocksubscriptionManager)(nil).PostSubscription), ctx, sub)
}

// UpdateSubscription mocks base method.
func (m *MocksubscriptionManager) UpdateSubscription(ctx context.Context, sub models.SubscriptionListJSON, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscription", ctx, sub, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSubscription indicates an expected call of UpdateSubscription.
func (mr *MocksubscriptionManagerMockRecorder) UpdateSubscription(ctx, sub, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscription", reflect.TypeOf((*MocksubscriptionManager)(nil).UpdateSubscription), ctx, sub, id)
}
